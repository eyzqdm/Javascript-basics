/*
纯函数
一个函数的返回结果只依赖于它的参数，并且在执行过程里面没有副作用。
 */

/* 
第一点 函数的返回结果只依赖于它的参数。即只要传入的参数不变，返回结果就永远不变
 */

const a = 1;

function add(num) {
  return a + num;
}
// add 就不是纯函数 它依赖外部变量a 当a发生变化 函数返回值也会变化

function newAdd(num1, num2) {
  return num1 + num2;
}

// newAdd就是纯函数 只要传入的参数不变 返回值就不变

/* 
第二点 函数执行过程没有副作用
一个函数执行过程对产生了外部可观察的变化那么就说这个函数是有副作用的。
 */

let flag = false
function foo(num) {
 if(num>3) flag = true
}
//foo(4)
//console.log(flag) // true
// 函数执行过程中修改了**外部**变量obj 他是不纯的

function bar(num) {
    return num>3
}
flag = bar(4)
console.log(flag) // true

// 这样改写后 不需要在内部修改flag也可以实现需求  函数也变纯了


/*  
除了修改外部的变量，一个函数在执行过程中还有很多方式产生外部可观察的变化，比如说调用 DOM API 修改页面，
或者发送了 Ajax 请求，还有调用 window.reload 刷新浏览器，甚至是 console.log 往控制台打印数据也是副作用。
纯函数很严格，也就是说你几乎除了计算数据以外什么都不能干，计算的时候还不能依赖除了函数参数以外的数据。
*/

/*
因为纯函数非常“靠谱”，执行一个纯函数你不用担心它会干什么坏事，它不会产生不可预料的行为，也不会对外部产生影响。
不管何时何地，你给它什么它就会乖乖地吐出什么。容易调试，易于测试，复用性高，易于组合，易于并行化。
 */